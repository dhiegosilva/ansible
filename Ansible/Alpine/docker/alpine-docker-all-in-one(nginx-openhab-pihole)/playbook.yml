---
- name: Setup Alpine Linux for Docker, Compose v2, and automated upgrades
  hosts: alpine
  become: true
  gather_facts: false

  collections:
    - community.docker

  vars:
    tz: "Europe/Berlin"
    pihole_hostname: "piholedhiego"
    pihole_virtual_host: "piholedhiego.duckdns.org"
    pihole_api_password: "f4x4d8p6"  # Plain text here
    openhab_uid: 9001
    openhab_gid: 9001
    docker_project_dir: "/opt/compose"
    docker_env_file: "/opt/compose/.env"
    docker_users: []  # e.g. ["dhiego"]

  pre_tasks:
    - name: Ensure repositories track latest-stable (main/community)
      ansible.builtin.replace:
        path: /etc/apk/repositories
        regexp: '^https://dl-cdn\.alpinelinux\.org/alpine/v[0-9.]+/(main|community)$'
        replace: 'https://dl-cdn.alpinelinux.org/alpine/latest-stable/\1'
      register: repo_replaced
      notify: apk update

    - name: Ensure /etc/timezone is set
      ansible.builtin.copy:
        dest: /etc/timezone
        content: "{{ tz }}\n"
        owner: root
        group: root
        mode: '0644'
      notify: reconfigure timezone

  tasks:
    - name: Install Docker engine, Compose v2 plugin, and helpful packages
      ansible.builtin.apk:
        update_cache: yes
        name:
          - docker
          - docker-compose-plugin
          - ca-certificates
          - tzdata
        state: latest

    - name: Enable and start Docker service
      ansible.builtin.service:
        name: docker
        enabled: true
        state: started

    - name: Add users to docker group (optional)
      ansible.builtin.user:
        name: "{{ item }}"
        groups: docker
        append: true
      loop: "{{ docker_users }}"
      when: docker_users | length > 0

    - name: Create project and data directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0755') }}"
      loop:
        - { path: "{{ docker_project_dir }}" }
        - { path: "/opt/piHole/etc-pihole" }
        - { path: "/opt/piHole/etc-dnsmasq.d" }
        - { path: "/opt/openhab/addons", owner: "{{ openhab_uid }}", group: "{{ openhab_gid }}" }
        - { path: "/opt/openhab/conf", owner: "{{ openhab_uid }}", group: "{{ openhab_gid }}" }
        - { path: "/opt/openhab/userdata", owner: "{{ openhab_uid }}", group: "{{ openhab_gid }}" }
        - { path: "/opt/mosquitto/config" }
        - { path: "/opt/mosquitto/data" }
        - { path: "/opt/mosquitto/log" }

    - name: Deploy Docker Compose environment file
      ansible.builtin.copy:
        dest: "{{ docker_env_file }}"
        owner: root
        group: root
        mode: '0644'
        content: |
          TZ={{ tz }}
          VIRTUAL_HOST={{ pihole_virtual_host }}
          PROXY_LOCATION={{ pihole_virtual_host }}
          PIHOLE_DNS_1=1.1.1.1
          PIHOLE_DNS_2=8.8.8.8
          FTLCONF_webserver_api_password={{ pihole_api_password }}

    - name: Deploy Docker Compose file
      ansible.builtin.copy:
        dest: "{{ docker_project_dir }}/docker-compose.yml"
        mode: '0644'
        content: |
          services:
            watchtower:
              image: containrrr/watchtower:latest
              restart: unless-stopped
              container_name: watchtower
              environment:
                - WATCHTOWER_CLEANUP=true
                - WATCHTOWER_INCLUDE_RESTARTING=true
                - WATCHTOWER_POLL_INTERVAL=3600
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
                - /etc/timezone:/etc/timezone:ro
                - /etc/localtime:/etc/localtime:ro

            pihole:
              container_name: pihole
              image: pihole/pihole:latest
              hostname: {{ pihole_hostname }}
              env_file:
                - .env
              environment:
                - DNSMASQ_LISTENING=all
              volumes:
                - /opt/piHole/etc-pihole:/etc/pihole
                - /opt/piHole/etc-dnsmasq.d:/etc/dnsmasq.d
              network_mode: 'host'
              restart: unless-stopped
              dns:
                - 127.0.0.1
                - 1.1.1.1
              cap_add:
                - NET_ADMIN

            openhab:
              image: openhab/openhab:latest-alpine
              container_name: openhab
              restart: unless-stopped
              ports:
                - "8080:8080"
                - "8443:8443"
                - "5007:5007"
              environment:
                TZ: "{{ tz }}"
                OPENHAB_HTTP_PORT: "8080"
                OPENHAB_HTTPS_PORT: "8443"
                USER_ID: "{{ openhab_uid }}"
                GROUP_ID: "{{ openhab_gid }}"
                CRYPTO_POLICY: "unlimited"
              volumes:
                - "/opt/openhab/addons:/openhab/addons"
                - "/opt/openhab/conf:/openhab/conf"
                - "/opt/openhab/userdata:/openhab/userdata"
              depends_on:
                - mosquitto

            mosquitto:
              image: eclipse-mosquitto:latest
              container_name: mosquitto
              restart: unless-stopped
              ports:
                - "1883:1883"
                - "9001:9001"
              volumes:
                - "/opt/mosquitto/config:/mosquitto/config"
                - "/opt/mosquitto/data:/mosquitto/data"
                - "/opt/mosquitto/log:/mosquitto/log"

      register: compose_file

    - name: Validate Compose file
      ansible.builtin.command:
        cmd: "docker compose -f {{ docker_project_dir }}/docker-compose.yml config"
      changed_when: false

    - name: Apply Docker Compose
      community.docker.docker_compose_v2:
        project_src: "{{ docker_project_dir }}"
        state: present
        pull: always
      register: compose_apply

    - name: Install weekly auto-upgrade script
      ansible.builtin.copy:
        dest: /etc/periodic/weekly/auto-upgrade
        mode: '0755'
        content: |
          #!/bin/sh
          set -eu
          apk update >/dev/null
          UPGRADES="$(apk list -u 2>/dev/null | grep -v 'installed$' || true)"
          if [ -n "$UPGRADES" ]; then
            echo "Upgrades available:"
            echo "$UPGRADES"
            apk upgrade -a
            if echo "$UPGRADES" | grep -Eiq '(^| )musl|(^| )linux-|(^| )grub'; then
              echo "Critical components updated; rebooting..."
              /sbin/reboot
            else
              echo "Upgraded packages; no reboot required."
            fi
          else
            echo "No upgrades available."
          fi

    - name: Ensure periodic weekly is enabled
      ansible.builtin.service:
        name: crond
        enabled: true
        state: started

  handlers:
    - name: apk update
      ansible.builtin.command: apk update
      listen: apk update

    - name: reconfigure timezone
      ansible.builtin.command: setup-timezone -z "{{ tz }}"
      listen: reconfigure timezone
      changed_when: false
