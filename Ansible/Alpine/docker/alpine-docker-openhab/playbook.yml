- name: Setup Alpine Linux for Docker and Automated Upgrades
  hosts: alpine
  become: true

  tasks:
    - name: Update repository to use the latest stable Alpine packages
      ansible.builtin.lineinfile:
        path: /etc/apk/repositories
        regexp: '^https://dl-cdn.alpinelinux.org/alpine/v[0-9\.]+/main$'
        line: 'https://dl-cdn.alpinelinux.org/alpine/latest-stable/main'
        state: present
      register: main_repo

    - name: Update community repository to use the latest stable Alpine packages
      ansible.builtin.lineinfile:
        path: /etc/apk/repositories
        regexp: '^https://dl-cdn.alpinelinux.org/alpine/v[0-9\.]+/community$'
        line: 'https://dl-cdn.alpinelinux.org/alpine/latest-stable/community'
        state: present
      register: community_repo

    - name: Run apk update if repositories were modified
      ansible.builtin.command: apk update
      when: main_repo.changed or community_repo.changed

    - name: Install Docker and Docker Compose
      ansible.builtin.apk:
        name:
          - docker
          - docker-compose
        update_cache: yes
        state: latest

    - name: Enable Docker service to start on boot
      ansible.builtin.service:
        name: docker
        enabled: true

    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started

    - name: Create persistent storage directories for services
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0775'
      loop:
        - /opt/openhab/addons
        - /opt/openhab/conf
        - /opt/openhab/userdata
        - /opt/mosquitto/config
        - /opt/mosquitto/data
        - /opt/mosquitto/log

    - name: Create docker-compose.yml in /opt
      ansible.builtin.copy:
        dest: /opt/docker-compose.yml
        mode: '0644'
        content: |
          services:
            watchtower:
              image: containrrr/watchtower:latest
              restart: unless-stopped
              container_name: watchtower
              environment:
                - WATCHTOWER_CLEANUP=true
                - WATCHTOWER_INCLUDE_RESTARTING=true
                - WATCHTOWER_POLL_INTERVAL=3600
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
                - /etc/timezone:/etc/timezone:ro
              ports:
                - "5555:8080"

            openhab:
              image: "openhab/openhab:latest-alpine"
              container_name: openhab
              restart: unless-stopped
              ports:
                - "8080:8080"      # OpenHAB main UI port
                - "8443:8443"      # OpenHAB HTTPS port
                - "5007:5007"      # OpenHAB remote console port
              environment:
                TZ: "Europe/Berlin"  # Replace with your timezone
                OPENHAB_HTTP_PORT: "8080"
                OPENHAB_HTTPS_PORT: "8443"
                USER_ID: "9001"    # Adjust user ID if necessary
                GROUP_ID: "9001"   # Adjust group ID if necessary
                CRYPTO_POLICY: "unlimited"
              volumes:
                - "/opt/ceph/openhab/addons:/openhab/addons"     # Mount for additional bindings and addons
                - "/opt/ceph/openhab/conf:/openhab/conf"         # Configuration files (e.g., rules, items, sitemap)
                - "/opt/ceph/openhab/userdata:/openhab/userdata" # Persistent data
              depends_on:
                - mosquitto

            mosquitto:
              image: "eclipse-mosquitto:latest"
              container_name: mosquitto
              restart: unless-stopped
              ports:
                - "1883:1883"      # MQTT port for clients
                - "9001:9001"      # WebSocket port for MQTT over WebSocket (optional)
              volumes:
                - "/opt/mosquitto/config:/mosquitto/config"   # Config files for Mosquitto
                - "/opt/mosquitto/data:/mosquitto/data"       # Persistence data for Mosquitto
                - "/opt/mosquitto/log:/mosquitto/log"         # Log files for Mosquitto


    - name: Restart all Docker services
      ansible.builtin.shell: docker-compose down && docker-compose up -d
      args:
        chdir: /opt

    - name: Create a script to auto-upgrade and reboot if needed
      ansible.builtin.copy:
        dest: /usr/local/bin/auto_upgrade.sh
        mode: '0755'
        content: |
          #!/bin/sh
          # Update the package index
          apk update
          # Perform the upgrade
          if apk upgrade --available | grep -q "Upgraded"; then
            # If packages were upgraded, reboot
            echo "System upgraded, rebooting..."
            reboot
          else
            echo "No upgrades performed."
          fi

    - name: Schedule weekly cron job for auto-upgrade script
      ansible.builtin.cron:
        name: "Weekly auto-upgrade for Alpine Linux"
        job: "/usr/local/bin/auto_upgrade.sh"
        weekday: "0"  # Sunday
        hour: "3"     # 3:00 AM
        user: root
        state: present
