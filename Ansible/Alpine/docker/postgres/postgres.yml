---
- name: Setup Alpine Linux for Docker and Automated Upgrades
  hosts: alpine
  become: true

  tasks:
    - name: Update repository to use the latest stable Alpine packages
      ansible.builtin.lineinfile:
        path: /etc/apk/repositories
        regexp: '^https://dl-cdn.alpinelinux.org/alpine/v[0-9\.]+/main$'
        line: 'https://dl-cdn.alpinelinux.org/alpine/latest-stable/main'
        state: present
      register: main_repo

    - name: Update community repository to use the latest stable Alpine packages
      ansible.builtin.lineinfile:
        path: /etc/apk/repositories
        regexp: '^https://dl-cdn.alpinelinux.org/alpine/v[0-9\.]+/community$'
        line: 'https://dl-cdn.alpinelinux.org/alpine/latest-stable/community'
        state: present
      register: community_repo

    - name: Run apk update if repositories were modified
      ansible.builtin.command: apk update
      when: main_repo.changed or community_repo.changed

    - name: Install Docker and Docker Compose
      ansible.builtin.apk:
        name:
          - docker
          - docker-compose
        update_cache: yes
        state: latest

    - name: Enable Docker service to start on boot
      ansible.builtin.service:
        name: docker
        enabled: true

    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started

    - name: Create persistent storage directory for pgAdmin
      ansible.builtin.file:
        path: /opt/pgadmin_data
        state: directory
        mode: '0775'
        owner: 5050
        group: 5050

    - name: Create docker-compose.yml in /opt
      ansible.builtin.copy:
        dest: /opt/docker-compose.yml
        mode: '0644'
        content: |
          version: "3.9"
          services:
            postgres:
              image: postgres:17-alpine
              container_name: postgres
              restart: unless-stopped
              environment:
                POSTGRES_DB: metabase
                POSTGRES_USER: dhiego
                POSTGRES_PASSWORD: f4x4d8p6
              volumes:
                - /opt/postgres_data:/var/lib/postgresql/data
              ports:
                - "5432:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U dhiego"]
                interval: 10s
                timeout: 5s
                retries: 5

            pgbouncer:
              image: edoburu/pgbouncer
              container_name: pgbouncer
              restart: unless-stopped
              environment:
                DATABASE_URL: postgres://dhiego:f4x4d8p6@postgres:5432/metabase
              volumes:
                - /opt/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
                - /opt/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
              ports:
                - "6432:6432"
              depends_on:
                postgres:
                  condition: service_healthy

            pgadmin:
              image: dpage/pgadmin4:latest
              container_name: pgadmin
              restart: unless-stopped
              environment:
                PGADMIN_DEFAULT_EMAIL: dhiego.silva@hotmail.com
                PGADMIN_DEFAULT_PASSWORD: f4x4d8p6
              ports:
                - "8080:80"
              volumes:
                - /opt/pgadmin_data:/var/lib/pgadmin

            watchtower:
              image: containrrr/watchtower:latest
              container_name: watchtower
              environment:
                - WATCHTOWER_CLEANUP=true
                - WATCHTOWER_LABEL_ENABLE=true
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
              restart: unless-stopped
              command: --interval 300

    - name: Create PgBouncer configuration directory
      ansible.builtin.file:
        path: /opt/pgbouncer
        state: directory
        mode: '0755'

    - name: Create PgBouncer configuration file
      ansible.builtin.copy:
        dest: /opt/pgbouncer/pgbouncer.ini
        mode: '0644'
        content: |
          [databases]
          metabase = host=postgres port=5432 dbname=metabase user=dhiego password=f4x4d8p6

          [pgbouncer]
          ignore_startup_parameters = extra_float_digits
          listen_addr = 0.0.0.0
          listen_port = 6432
          auth_type = md5
          auth_file = /etc/pgbouncer/userlist.txt
          pool_mode = session
          max_client_conn = 100
          default_pool_size = 20
          log_connections = 1
          log_disconnections = 1
          log_pooler_errors = 1

    - name: Create PgBouncer userlist file
      ansible.builtin.shell: |
        echo '"dhiego" "md5$(echo -n f4x4d8p6dhiego | md5sum | awk '\''{print $1}'\'')"' > /opt/pgbouncer/userlist.txt
      args:
        creates: /opt/pgbouncer/userlist.txt

    - name: Restart all Docker services
      ansible.builtin.shell: docker-compose down && docker-compose up -d
      args:
        chdir: /opt

    - name: Create a script to auto-upgrade and reboot if needed
      ansible.builtin.copy:
        dest: /usr/local/bin/auto_upgrade.sh
        mode: '0755'
        content: |
          #!/bin/sh
          # Update the package index
          apk update
          # Perform the upgrade
          if apk upgrade --available | grep -q "Upgraded"; then
            # If packages were upgraded, reboot
            echo "System upgraded, rebooting..."
            reboot
          else
            echo "No upgrades performed."
          fi

    - name: Schedule weekly cron job for auto-upgrade script
      ansible.builtin.cron:
        name: "Weekly auto-upgrade for Alpine Linux"
        job: "/usr/local/bin/auto_upgrade.sh"
        weekday: "0"  # Sunday
        hour: "3"     # 3:00 AM
        user: root
        state: present
