---
- name: Setup Alpine Linux for Podman and Automated Upgrades
  hosts: alpine
  become: true

  tasks:

    - name: Set Podman storage driver to vfs for LXC compatibility
      ansible.builtin.copy:
        dest: /etc/containers/storage.conf
        content: |
          [storage]
          driver = "vfs"
          runroot = "/var/run/containers/storage"
          graphroot = "/var/lib/containers/storage"

    - name: Create safe containers.conf with LXC-friendly cgroup manager
      ansible.builtin.copy:
        dest: /etc/containers/containers.conf
        content: |
          [engine]
          cgroup_manager = "cgroupfs"

    - name: Clear Podman storage database to accept new driver
      ansible.builtin.file:
        path: /var/lib/containers/storage
        state: absent

    - name: Set Podman cgroup manager to cgroupfs (safe for LXC)
      ansible.builtin.lineinfile:
        path: /etc/containers/containers.conf
        line: 'cgroup_manager = "cgroupfs"'
        insertafter: '^\[engine\]'
        create: yes
    
    - name: Update repository to use the latest stable Alpine packages
      ansible.builtin.lineinfile:
        path: /etc/apk/repositories
        regexp: '^https://dl-cdn.alpinelinux.org/alpine/v[0-9\.]+/main$'
        line: 'https://dl-cdn.alpinelinux.org/alpine/latest-stable/main'
        state: present
      register: main_repo

    - name: Update community repository to use the latest stable Alpine packages
      ansible.builtin.lineinfile:
        path: /etc/apk/repositories
        regexp: '^https://dl-cdn.alpinelinux.org/alpine/v[0-9\.]+/community$'
        line: 'https://dl-cdn.alpinelinux.org/alpine/latest-stable/community'
        state: present
      register: community_repo

    - name: Run apk update if repositories were modified
      ansible.builtin.command: apk update
      when: main_repo.changed or community_repo.changed

    - name: Install dependencies for Podman and Podman Compose
      ansible.builtin.apk:
        name:
          - podman
          - podman-compose
          - fuse-overlayfs
          - shadow
        update_cache: yes
        state: present

    - name: Ensure /etc/subuid and /etc/subgid exist for current user
      ansible.builtin.lineinfile:
        path: "{{ item.path }}"
        line: "{{ ansible_user }}:100000:65536"
        create: yes
      loop:
        - { path: /etc/subuid }
        - { path: /etc/subgid }

    - name: Enable and start Podman service
      ansible.builtin.shell: |
        rc-update add podman default
        rc-service podman start
      args:
        executable: /bin/sh

    - name: Verify Podman installation
      ansible.builtin.command: podman --version
      register: podman_version
      changed_when: false

    - name: Display Podman version
      ansible.builtin.debug:
        msg: "Podman version: {{ podman_version.stdout }}"

    - name: Create Docker Compose file (Podman-compatible)
      ansible.builtin.copy:
        dest: /opt/docker-compose.yml
        content: |
          services:

            watchtower:
              image: containrrr/watchtower:latest
              restart: unless-stopped
              container_name: watchtower
              environment:
                - WATCHTOWER_CLEANUP=true
                - WATCHTOWER_INCLUDE_RESTARTING=true
                - WATCHTOWER_POLL_INTERVAL=3600
              ports:
                - "5555:8080"
              # NOTE: docker.sock volume removed â€“ not needed for Podman

            pihole:
              container_name: pihole
              image: pihole/pihole:latest
              hostname: piholedhiego
              environment:
                - TZ=Europe/Berlin
                - VIRTUAL_HOST=piholedhiego.duckdns.org
                - PROXY_LOCATION=piholedhiego.duckdns.org
                - VIRTUAL_PORT=80
                - PIHOLE_DNS_1=1.1.1.1
                - PIHOLE_DNS_2=8.8.8.8
                - FTLCONF_webserver_api_password=f4x4d8p6
                - DNSMASQ_LISTENING=all
              volumes:
                - /opt/piHole/etc-pihole:/etc/pihole
                - /opt/piHole/etc-dnsmasq.d:/etc/dnsmasq.d
              network_mode: host
              restart: unless-stopped
              dns:
                - 127.0.0.1
                - 1.1.1.1
              cap_add:
                - NET_ADMIN

            openhab:
              image: "openhab/openhab:latest-alpine"
              container_name: openhab
              restart: unless-stopped
              ports:
                - "8080:8080"
                - "8443:8443"
                - "5007:5007"
              environment:
                TZ: "Europe/Berlin"
                OPENHAB_HTTP_PORT: "8080"
                OPENHAB_HTTPS_PORT: "8443"
                USER_ID: "9001"
                GROUP_ID: "9001"
                CRYPTO_POLICY: "unlimited"
              volumes:
                - "/opt/openhab/addons:/openhab/addons"
                - "/opt/openhab/conf:/openhab/conf"
                - "/opt/openhab/userdata:/openhab/userdata"
              depends_on:
                - mosquitto

            mosquitto:
              image: "eclipse-mosquitto:latest"
              container_name: mosquitto
              restart: unless-stopped
              ports:
                - "1883:1883"
                - "9001:9001"
              volumes:
                - "/opt/mosquitto/config:/mosquitto/config"
                - "/opt/mosquitto/data:/mosquitto/data"
                - "/opt/mosquitto/log:/mosquitto/log"
      register: docker_compose_file

    - name: Start Podman Compose
      ansible.builtin.command:
        cmd: "podman-compose -f /opt/docker-compose.yml up -d"
        chdir: /opt

    - name: Ensure Podman Compose is restarted if Compose file changes
      ansible.builtin.command:
        cmd: "podman-compose -f /opt/docker-compose.yml restart"
        chdir: /opt
      when: "docker_compose_file.changed"

    - name: Create a script to auto-upgrade and reboot if needed
      ansible.builtin.copy:
        dest: /usr/local/bin/auto_upgrade.sh
        mode: '0755'
        content: |
          #!/bin/sh
          # Update the package index
          apk update
          # Perform the upgrade
          if apk upgrade --available | grep -q "Upgraded"; then
            # If packages were upgraded, reboot
            echo "System upgraded, rebooting..."
            reboot
          else
            echo "No upgrades performed."
          fi

    - name: Schedule weekly cron job for auto-upgrade script
      ansible.builtin.cron:
        name: "Weekly auto-upgrade for Alpine Linux"
        job: "/usr/local/bin/auto_upgrade.sh"
        weekday: "0"  # Sunday
        hour: "3"     # 3:00 AM
        user: root
        state: present
