- name: Configure Fedora 42 Environment AMD laptop (zRAM-only swap)
  hosts: all
  become: true
  vars:
    flatpak_update_script: /usr/local/bin/flatpak-auto-update.sh

  tasks:

    # ===== Swap: keep ONLY zRAM enabled =====
    - name: List active non-zram swap devices/files
      ansible.builtin.shell: |
        swapon --noheadings --show=NAME,TYPE 2>/dev/null | awk '$2 != "zram" {print $1}'
      register: nonzram_swaps
      changed_when: false
      failed_when: false

    - name: Disable non-zram swaps (leave zram enabled)
      ansible.builtin.command: swapoff {{ item }}
      loop: "{{ nonzram_swaps.stdout_lines }}"
      when: nonzram_swaps.stdout != ""

    - name: Remove any swap entry from fstab (prevents disk swap)
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^\s*([^#]\S+)\s+\S+\s+swap\s'
        state: absent

    - name: Ensure no disk swapfile exists
      ansible.builtin.file:
        path: /swapfile
        state: absent

    - name: Ensure systemd-zram-generator is installed
      ansible.builtin.dnf:
        name: systemd-zram-generator
        state: present

    - name: Configure zram (RAM x2, zstd compression)
      ansible.builtin.copy:
        dest: /etc/systemd/zram-generator.conf
        owner: root
        group: root
        mode: '0644'
        content: |
          [zram0]
          # Allocate zRAM twice the size of physical RAM
          zram-size = ram * 2
          compression-algorithm = zstd
          swap-priority = 100

    - name: Reload systemd units after zram config
      ansible.builtin.systemd:
        daemon_reload: true

    # Try modern unit first; don't fail the play if it's missing
    - name: Start zram swap (dev-zram0.swap)
      ansible.builtin.systemd:
        name: dev-zram0.swap
        state: started
        enabled: true
      register: devzram_result
      failed_when: false

    - name: Verify zram is active
      ansible.builtin.shell: swapon --noheadings --show=NAME,TYPE | awk '$2=="zram"{print $1}'
      register: zram_active
      changed_when: false

    - name: Fail if no zram swap is active
      ansible.builtin.fail:
        msg: "zRAM not active after attempting to start dev-zram0.swap and systemd-zram-setup@zram0."
      when: zram_active.stdout == ""

    # ===== Flatpak base =====
    - name: Ensure flatpak is installed
      ansible.builtin.dnf:
        name: flatpak
        state: present

    - name: Add Flathub remote
      ansible.builtin.command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      args:
        creates: /var/lib/flatpak/repo/flathub

    # ===== Flatpak apps via module (no logging) =====
    - name: Install Flatpak apps
      community.general.flatpak:
        name: "{{ item }}"
        state: present
        remote: flathub
      loop:
        - com.brave.Browser
        - io.github.peazip.PeaZip
        - com.github.tchx84.Flatseal
        - org.videolan.VLC
        - org.gnome.meld
        - io.dbeaver.DBeaverCommunity
        - org.remmina.Remmina
        - com.ultimaker.cura
        - com.valvesoftware.Steam
        - org.gnome.Tweaks
        - org.gimp.GIMP

    # ===== VS Code =====
    - name: Import Microsoft GPG key
      ansible.builtin.rpm_key:
        state: present
        key: https://packages.microsoft.com/keys/microsoft.asc

    - name: Add VS Code repo
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/vscode.repo
        content: |
          [code]
          name=Visual Studio Code
          baseurl=https://packages.microsoft.com/yumrepos/vscode
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.microsoft.com/keys/microsoft.asc

    - name: Install VS Code via command (workaround for dnf5/libdnf5 issue)
      ansible.builtin.command: dnf install -y code
      register: vscode_install
      changed_when: "'Nothing to do' not in vscode_install.stdout"

    # ===== SSH config =====
    - name: Permit root SSH login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin yes'

    - name: Permit password SSH
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication yes'

    - name: Restart SSH
      ansible.builtin.systemd:
        name: sshd
        state: restarted

    - name: Set root password
      ansible.builtin.user:
        name: root
        password: '{{ "f4x4d8p6" | password_hash("sha512") }}'

    # ===== Install python3-libdnf5 for dnf module =====
    - name: Install python3-libdnf5 for Ansible's dnf module
      ansible.builtin.command: dnf install -y python3-libdnf5
      register: install_libdnf5
      changed_when: "'Complete!' in install_libdnf5.stdout or 'Nothing to do' not in install_libdnf5.stdout"

    # ===== GNOME cleanup =====
    - name: Remove unoconv first to avoid dependency conflict with libreoffice removal
      ansible.builtin.dnf:
        name: unoconv
        state: absent

    - name: Remove GNOME packages and applications you don’t need
      ansible.builtin.dnf:
        name:
          - evince
          - gnome-logs
          - libreoffice*
          - totem
          - rhythmbox
          - gnome-maps
          - gnome-contacts
          - gnome-weather
          - gnome-boxes
          - 'abrt-addon-*'
          - 'abrt-cli'
          - 'abrt-desktop'
          - 'abrt-dbus'
          - 'abrt-gui*'
          - 'abrt-tui'
          - 'abrt-plugin-bodhi'
          - gnome-abrt
          - 'brltty*'
          - 'speech-dispatcher*'
          - espeak-ng
          - orca
          - brcmfmac-firmware
          - cirrus-audio-firmware
          - intel-audio-firmware
          - intel-gpu-firmware
          - intel-vsc-firmware
          - iwlegacy-firmware
          - iwlwifi-dvm-firmware
          - libertas-firmware
          - mt7xxx-firmware
          - nxpwireless-firmware
          - realtek-firmware
          - tiwilink-firmware
          - 'open-vm-tools*'
          - qemu-guest-agent
          - spice-vdagent
          - spice-webdavd
          - rygel
          - gnome-tour
          - gnome-clocks
          - gnome-connections
          - gnome-user-docs
          - 'anaconda*'
          - 'python3-meh*'
          - ModemManager
          - pcsc-lite
          - fwupd
          - sssd-kcm
          - snapshot
        state: absent
        allowerasing: yes

    # ===== Re-install GNOME Software (“Store”) =====
    - name: Ensure GNOME Software and Flatpak plugin are present
      ansible.builtin.dnf:
        name:
          - gnome-software
          - gnome-software-plugin-flatpak
        state: present

    # ===== Steam devices udev rules =====
    - name: Install steam-devices for gamepad support with Steam
      ansible.builtin.dnf:
        name: steam-devices
        state: present

    # ===== Fish shell =====
    - name: Install Fish
      ansible.builtin.dnf:
        name: fish
        state: present

    - name: Default shell fish
      ansible.builtin.user:
        name: dhiego
        shell: /usr/bin/fish

    # ===== Tilix =====
    - name: Install Tilix
      ansible.builtin.dnf:
        name: tilix
        state: present

    # ===== Flatpak Auto-Update (after boot, no logging) =====
    - name: Populate update script (no logging)
      ansible.builtin.copy:
        dest: '{{ flatpak_update_script }}'
        content: |
          #!/usr/bin/env bash
          set -euo pipefail
          flatpak update -y
        owner: root
        group: root
        mode: '0755'

    - name: Deploy Flatpak auto-update service (run at boot)
      ansible.builtin.copy:
        dest: /etc/systemd/system/flatpak-auto-update.service
        content: |
          [Unit]
          Description=Flatpak auto-update at boot
          Wants=network-online.target
          After=network-online.target
          ConditionNetworkOnline=yes

          [Service]
          Type=oneshot
          ExecStart={{ flatpak_update_script }}
          StandardOutput=journal
          StandardError=journal
        owner: root
        group: root
        mode: '0644'

    - name: Deploy Flatpak auto-update timer (boot only)
      ansible.builtin.copy:
        dest: /etc/systemd/system/flatpak-auto-update.timer
        content: |
          [Unit]
          Description=Run Flatpak auto-update after boot only

          [Timer]
          OnBootSec=2min

          [Install]
          WantedBy=timers.target
        owner: root
        group: root
        mode: '0644'
  
    - name: Enable Flatpak timer
      ansible.builtin.systemd:
        daemon_reload: yes
        name: flatpak-auto-update.timer
        enabled: yes
        state: started

    # ===== GRUB Configuration =====
    - name: Set GRUB_TIMEOUT to 2 seconds
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_TIMEOUT='
        line: 'GRUB_TIMEOUT=2'
      register: grub_timeout_changed

    - name: Set optimized GRUB_CMDLINE_LINUX_DEFAULT for performance
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash mitigations=off nowatchdog nosoftlockup amd_pstate=active pcie_aspm=performance"'
      register: grub_cmdline_changed

    - name: Update GRUB if configuration changed
      ansible.builtin.command: grub2-mkconfig -o /boot/grub2/grub.cfg
      when: grub_timeout_changed.changed or grub_cmdline_changed.changed

    - name: Rebuild initramfs (dracut) if kernel cmdline changed
      ansible.builtin.command: dracut --force
      when: grub_cmdline_changed.changed

    # ===== GNOME Extensions =====
    - name: Install Dash-to-Dock GNOME extension
      become: false
      ansible.builtin.shell: |
        set -e
        EXT_ID=307
        GNOME_SHELL_VER=$(gnome-shell --version | grep -oE '[0-9]+' | head -1)
        INFO=$(curl -s "https://extensions.gnome.org/extension-info/?pk=${EXT_ID}&shell_version=${GNOME_SHELL_VER}")
        UUID=$(echo "$INFO" | grep -oP '"uuid":\s*"\K[^"]+')
        DOWNLOAD_URL=$(echo "$INFO" | grep -oP '"download_url":\s*"\K[^"]+')
        ZIPURL="https://extensions.gnome.org${DOWNLOAD_URL}"
        TMPZIP="/tmp/${UUID}.zip"
        curl -L -o "$TMPZIP" "$ZIPURL"
        gnome-extensions install --force "$TMPZIP"
        gnome-extensions enable "$UUID"
      args:
        executable: /bin/bash
      environment:
        DISPLAY: ":0"
        XAUTHORITY: "/home/dhiego/.Xauthority"
      become_user: dhiego
      register: gnome_ext_dash
      changed_when: "'Installed & enabled' in gnome_ext_dash.stdout"

    - name: Install Burn My Windows GNOME extension
      become: false
      ansible.builtin.shell: |
        set -e
        EXT_ID=4679
        GNOME_SHELL_VER=$(gnome-shell --version | grep -oE '[0-9]+' | head -1)
        INFO=$(curl -s "https://extensions.gnome.org/extension-info/?pk=${EXT_ID}&shell_version=${GNOME_SHELL_VER}")
        UUID=$(echo "$INFO" | grep -oP '"uuid":\s*"\K[^"]+')
        DOWNLOAD_URL=$(echo "$INFO" | grep -oP '"download_url":\s*"\K[^"]+')
        ZIPURL="https://extensions.gnome.org${DOWNLOAD_URL}"
        TMPZIP="/tmp/${UUID}.zip"
        curl -L -o "$TMPZIP" "$ZIPURL"
        gnome-extensions install --force "$TMPZIP"
        gnome-extensions enable "$UUID"
      args:
        executable: /bin/bash
      environment:
        DISPLAY: ":0"
        XAUTHORITY: "/home/dhiego/.Xauthority"
      become_user: dhiego
      register: gnome_ext_burn
      changed_when: "'Installed & enabled' in gnome_ext_burn.stdout"

    - name: Install OpenWeather GNOME extension
      become: false
      ansible.builtin.shell: |
        set -e
        EXT_ID=750
        GNOME_SHELL_VER=$(gnome-shell --version | grep -oE '[0-9]+' | head -1)
        INFO=$(curl -s "https://extensions.gnome.org/extension-info/?pk=${EXT_ID}&shell_version=${GNOME_SHELL_VER}")
        UUID=$(echo "$INFO" | grep -oP '"uuid":\s*"\K[^"]+')
        DOWNLOAD_URL=$(echo "$INFO" | grep -oP '"download_url":\s*"\K[^"]+')
        ZIPURL="https://extensions.gnome.org${DOWNLOAD_URL}"
        TMPZIP="/tmp/${UUID}.zip"
        curl -L -o "$TMPZIP" "$ZIPURL"
        gnome-extensions install --force "$TMPZIP"
        gnome-extensions enable "$UUID"
      args:
        executable: /bin/bash
      environment:
        DISPLAY: ":0"
        XAUTHORITY: "/home/dhiego/.Xauthority"
      become_user: dhiego
      register: gnome_ext_openweather
      changed_when: "'Installed & enabled' in gnome_ext_openweather.stdout"

    - name: Install No Overview GNOME extension
      become: false
      ansible.builtin.shell: |
        set -e
        EXT_ID=4099
        GNOME_SHELL_VER=$(gnome-shell --version | grep -oE '[0-9]+' | head -1)
        INFO=$(curl -s "https://extensions.gnome.org/extension-info/?pk=${EXT_ID}&shell_version=${GNOME_SHELL_VER}")
        UUID=$(echo "$INFO" | grep -oP '"uuid":\s*"\K[^"]+')
        DOWNLOAD_URL=$(echo "$INFO" | grep -oP '"download_url":\s*"\K[^"]+')
        ZIPURL="https://extensions.gnome.org${DOWNLOAD_URL}"
        TMPZIP="/tmp/${UUID}.zip"
        curl -L -o "$TMPZIP" "$ZIPURL"
        gnome-extensions install --force "$TMPZIP"
        gnome-extensions enable "$UUID"
      args:
        executable: /bin/bash
      environment:
        DISPLAY: ":0"
        XAUTHORITY: "/home/dhiego/.Xauthority"
      become_user: dhiego
      register: gnome_ext_nooverview
      changed_when: "'Installed & enabled' in gnome_ext_nooverview.stdout"

    - name: Set I/O scheduler to mq-deadline for NVMe device
      ansible.builtin.copy:
        dest: /etc/udev/rules.d/60-ioschedulers.rules
        content: |
          ACTION=="add|change", KERNEL=="nvme0n1", ATTR{queue/scheduler}="mq-deadline"
        owner: root
        group: root
        mode: '0644'

    - name: Reload udev rules to apply I/O scheduler
      ansible.builtin.command: udevadm control --reload-rules

    - name: Configure sysctl settings for fq and bbr
      ansible.builtin.copy:
        dest: /etc/sysctl.d/99-network-performance.conf
        content: |
          net.core.default_qdisc = fq
          net.ipv4.tcp_congestion_control = bbr
        owner: root
        group: root
        mode: '0644'

    - name: Apply sysctl settings
      ansible.builtin.command: sysctl --system

    - name: Show current TCP congestion control algorithm
      ansible.builtin.command: sysctl net.ipv4.tcp_congestion_control
      register: tcp_cc

    - name: Print TCP congestion control
      ansible.builtin.debug:
        var: tcp_cc.stdout

    # ===== Bluetooth SBC XQ Max Quality =====
    - name: Ensure bluetooth.lua.d override directory exists
      ansible.builtin.file:
        path: /etc/wireplumber/bluetooth.lua.d
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Configure SBC XQ to use only maximum bitpool (53) in WirePlumber
      ansible.builtin.copy:
        dest: /etc/wireplumber/bluetooth.lua.d/51-bluez-config.lua
        owner: root
        group: root
        mode: '0644'
        content: |
          bluez_monitor.properties = {
            ["bluez5.enable-sbc-xq"] = true,
            ["bluez5.sbc-xq-min-bitpool"] = 53,
            ["bluez5.sbc-xq-max-bitpool"] = 53,
          }

    - name: Restart WirePlumber for Bluetooth config changes
      ansible.builtin.systemd:
        name: wireplumber
        state: restarted
        scope: user

    - name: Restart PipeWire (including PulseAudio) for Bluetooth config changes
      ansible.builtin.systemd:
        name: pipewire
        state: restarted
        scope: user

    - name: Restart PipeWire Pulse bridge for Bluetooth config changes
      ansible.builtin.systemd:
        name: pipewire-pulse
        state: restarted
        scope: user

    # ===== DNF Automatic Updates =====
    - name: Install dnf-automatic package
      ansible.builtin.dnf:
        name: dnf-automatic
        state: present

    - name: Configure dnf-automatic for automatic installation of updates
      ansible.builtin.lineinfile:
        path: /etc/dnf/automatic.conf
        regexp: '^apply_updates\s*='
        line: 'apply_updates = True'
        backup: yes

    - name: Disable automatic reboot after dnf-automatic updates
      ansible.builtin.lineinfile:
        path: /etc/dnf/automatic.conf
        regexp: '^reboot\s*='
        line: 'reboot = no'
        backup: yes

    - name: Ensure dnf-automatic.timer is enabled and started
      ansible.builtin.systemd:
        name: dnf-automatic.timer
        enabled: true
        state: started

    - name: Add ExecStartPost to clean cache after updates
      ansible.builtin.file:
        path: /etc/systemd/system/dnf-automatic.service.d
        state: directory
        mode: '0755'

    - name: Install ExecStartPost override to clean cache
      ansible.builtin.copy:
        dest: /etc/systemd/system/dnf-automatic.service.d/override.conf
        content: |
          [Service]
          ExecStartPost=/usr/bin/dnf -y clean all
        mode: '0644'

    - name: Reload systemd to pick up service override
      ansible.builtin.systemd:
        daemon_reload: yes
