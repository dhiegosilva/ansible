- name: Configure Fedora 42 Environment
  hosts: all
  become: true
  vars:
    flatpak_update_script: /usr/local/bin/flatpak-auto-update.sh
    flatpak_update_log: /var/log/flatpak-update.log

  tasks:

    # ===== Swap removal =====
    - name: Check if swap is active
      command: swapon --summary
      register: swap_summary
      changed_when: false
      failed_when: false

    - name: Disable swap if active
      command: swapoff -a
      when: swap_summary.stdout != ""
      ignore_errors: true

    - name: Remove swap entry from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^\s*([^#]\S+)\s+\S+\s+swap\s'
        state: absent

    - name: Remove swapfile if exists
      file:
        path: /swapfile
        state: absent

    - name: Add Flathub remote
      command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      args:
        creates: /var/lib/flatpak/repo/flathub

    - name: Install Flatpak apps
      command: flatpak install -y flathub {{ item }}
      loop:
        - com.brave.Browser
        - io.github.peazip.PeaZip
        - com.github.tchx84.Flatseal
        - org.videolan.VLC
        - org.gnome.meld
        - io.dbeaver.DBeaverCommunity
        - org.remmina.Remmina
        - com.ultimaker.cura
        - com.valvesoftware.Steam             # Steam
        - org.gnome.Tweaks                    # GNOME Tweaks
      args:
        creates: '/var/lib/flatpak/app/{{ item }}'

    # ===== VS Code =====
    - name: Import Microsoft GPG key
      rpm_key:
        state: present
        key: https://packages.microsoft.com/keys/microsoft.asc

    - name: Add VS Code repo
      copy:
        dest: /etc/yum.repos.d/vscode.repo
        content: |
          [code]
          name=Visual Studio Code
          baseurl=https://packages.microsoft.com/yumrepos/vscode
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.microsoft.com/keys/microsoft.asc

    - name: Install VS Code via command (workaround for dnf5/libdnf5 issue)
      command: dnf install -y code
      register: vscode_install
      changed_when: "'Nothing to do' not in vscode_install.stdout"

    # ===== SSH config =====
    - name: Permit root SSH login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin yes'

    - name: Permit password SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication yes'

    - name: Restart SSH
      systemd:
        name: sshd
        state: restarted

    - name: Set root password
      user:
        name: root
        password: '{{ "f4x4d8p6" | password_hash("sha512") }}'

    # ===== Install python3-libdnf5 for dnf module =====
    - name: Install python3-libdnf5 for Ansible's dnf module
      command: dnf install -y python3-libdnf5
      register: install_libdnf5
      changed_when: "'Complete!' in install_libdnf5.stdout or 'Nothing to do' not in install_libdnf5.stdout"

    # ===== GNOME cleanup =====
    - name: Remove unoconv first to avoid dependency conflict with libreoffice removal
      dnf:
        name: unoconv
        state: absent

    - name: Remove GNOME packages and applications
      dnf:
        name:
          - evince
          - gnome-logs
          - libreoffice*
          - totem
          - rhythmbox
          - gnome-maps
          - gnome-contacts
          - gnome-weather
          - gnome-boxes
        state: absent

    # ===== Steam devices udev rules =====
    - name: Install steam-devices for gamepad support with Steam
      dnf:
        name: steam-devices
        state: present

    # ===== Fish shell =====
    - name: Install Fish
      dnf:
        name: fish
        state: present

    - name: Default shell fish
      user:
        name: dhiego
        shell: /usr/bin/fish

    # ===== Tilix =====
    - name: Install Tilix
      dnf:
        name: tilix
        state: present

    # ===== Flatpak Auto-Update =====
    - name: Ensure Flatpak update log
      file:
        path: '{{ flatpak_update_log }}'
        state: touch
        owner: root
        group: root
        mode: '0644'

    - name: Populate update script
      copy:
        dest: '{{ flatpak_update_script }}'
        content: |
          #!/usr/bin/env bash
          flatpak update -y >> "{{ flatpak_update_log }}" 2>&1
        owner: root
        group: root
        mode: '0755'

    - name: Deploy Flatpak auto-update service
      copy:
        dest: /etc/systemd/system/flatpak-auto-update.service
        content: |
          [Unit]
          Description=Flatpak auto-update at boot and weekly
          Wants=network-online.target
          After=network-online.target
          ConditionNetworkOnline=yes

          [Service]
          Type=oneshot
          ExecStart={{ flatpak_update_script }}
          StandardOutput=journal
          StandardError=journal
        owner: root
        group: root
        mode: '0644'

    - name: Deploy Flatpak auto-update timer
      copy:
        dest: /etc/systemd/system/flatpak-auto-update.timer
        content: |
          [Unit]
          Description=Run Flatpak auto-update at boot and weekly

          [Timer]
          OnBootSec=2min
          OnCalendar=weekly
          Persistent=true

          [Install]
          WantedBy=timers.target
        owner: root
        group: root
        mode: '0644'

    - name: Enable Flatpak timer
      systemd:
        daemon_reload: yes
        name: flatpak-auto-update.timer
        enabled: yes
        state: started

    # ===== GRUB Configuration =====
    - name: Set GRUB_TIMEOUT to 2 seconds
      lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_TIMEOUT='
        line: 'GRUB_TIMEOUT=2'
      register: grub_timeout_changed

    - name: Add mitigations=off to GRUB_CMDLINE_LINUX_DEFAULT
      lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash mitigations=off"'
      register: grub_cmdline_changed

    - name: Update GRUB if configuration changed
      command: grub2-mkconfig -o /boot/grub2/grub.cfg
      register: grub_update
      when: grub_timeout_changed.changed or grub_cmdline_changed.changed

    - name: Reboot if GRUB updated
      reboot:
        msg: "Rebooting system to apply new GRUB configuration..."
        pre_reboot_delay: 5
      when: grub_update.changed
