- name: Configure Ubuntu 25.04 Environment
  hosts: all
  become: true
  tasks:

    - name: Check if snap is installed
      ansible.builtin.stat:
        path: /usr/bin/snap
      register: snap_check

    - name: Stop snapd service to enable removal of core snaps
      ansible.builtin.systemd:
        name: snapd
        state: stopped
        enabled: no
      when: snap_check.stat.exists

    - name: Remove all non-core snap packages
      ansible.builtin.shell: |
        for snap in $(snap list | grep -v 'Name\|core\|snapd' | awk '{print $1}'); do
          snap remove --purge "$snap" || true
        done
      ignore_errors: true
      register: snap_remove_noncore_result
      when: snap_check.stat.exists

    - name: Remove core snap packages
      ansible.builtin.shell: |
        snap remove --purge snapd-desktop-integration || true
        snap remove --purge snap-store || true
        snap remove --purge core22 || true
      ignore_errors: true
      when: snap_check.stat.exists and snap_remove_noncore_result is succeeded

    - name: Remove snap completely from the system
      ansible.builtin.apt:
        name: snapd
        state: absent
      when: snap_check.stat.exists and snap_remove_noncore_result is succeeded

    - name: Upgrade all packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist

    - name: Install Git
      ansible.builtin.apt:
        name: git
        state: present
        update_cache: yes

    - name: Configure Git user name
      ansible.builtin.command: git config --global user.name "Dhiego Silva"
      args:
        creates: /home/dhiego/.gitconfig
      become: false

    - name: Configure Git user email
      ansible.builtin.command: git config --global user.email "dhiego.silva@hotmail.com"
      args:
        creates: /home/dhiego/.gitconfig
      become: false

    - name: Install flatpak
      ansible.builtin.apt:
        name: flatpak
        state: present

    - name: Install flatpak repository (Flathub)
      ansible.builtin.command: >
        flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      args:
        creates: /var/lib/flatpak/repo/flathub

    - name: Install applications via Flatpak
      ansible.builtin.command: "flatpak install -y flathub {{ item.id }}"
      args:
        creates: "/var/lib/flatpak/app/{{ item.id }}"
      loop:
        - { id: com.brave.Browser }
        - { id: io.github.peazip.PeaZip }
        - { id: com.github.tchx84.Flatseal }
        - { id: org.videolan.VLC }
        - { id: org.gnome.meld }
        - { id: io.dbeaver.DBeaverCommunity }
        - { id: org.remmina.Remmina }
        - { id: com.ultimaker.cura }

    - name: Install Visual Studio Code via .deb package
      ansible.builtin.shell: |
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
        install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list
        apt-get install apt-transport-https -y
        apt-get update
        apt-get install code -y
      args:
        creates: /usr/bin/code

    - name: Allow root login via SSH
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin yes'
        state: present

    - name: Permit password authentication for SSH
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication yes'
        state: present

    - name: Restart SSH service
      ansible.builtin.systemd:
        name: "{{ ssh_service_name }}"
        state: restarted
      vars:
        ssh_service_name: "{{ 'ssh' if ansible_distribution in ['Ubuntu', 'Debian'] else 'sshd' }}"

    - name: Set root password
      ansible.builtin.user:
        name: root
        password: "{{ 'f4x4d8p6' | password_hash('sha512') }}"

    - name: Remove unwanted GNOME packages
      ansible.builtin.apt:
        name:
          - gnome-power-manager
          - evince
          - gnome-logs
        state: absent

    - name: Autoremove orphaned packages
      ansible.builtin.apt:
        autoremove: yes
        purge: yes

    - name: Install Fish shell
      ansible.builtin.apt:
        name: fish
        state: present

    - name: Set Fish as default shell for user dhiego
      ansible.builtin.user:
        name: dhiego
        shell: /usr/bin/fish

    - name: Install GNOME Software
      ansible.builtin.apt:
        name: gnome-software
        state: present

    - name: Install GNOME Software Flatpak plugin
      ansible.builtin.apt:
        name: gnome-software-plugin-flatpak
        state: present

    - name: Add Oibaf graphics drivers PPA
      ansible.builtin.apt_repository:
        repo: ppa:kisak/kisak-mesa
        state: present

    - name: Update apt cache after adding PPA
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Preload
      ansible.builtin.apt:
        name: preload
        state: present

    # ===== Added section for GNOME logout prompt setting =====
    - name: Check if GNOME session bus is running
      ansible.builtin.stat:
        path: "/run/user/{{ lookup('ansible.builtin.pipe', 'id -u dhiego') }}/bus"
      register: gnome_session_bus

    - name: Disable logout prompt in GNOME for user dhiego
      ansible.builtin.shell: |
        export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u dhiego)/bus"
        sudo -u dhiego gsettings set org.gnome.SessionManager logout-prompt false
      args:
        executable: /bin/bash
      become: false
      when: gnome_session_bus.stat.exists
      ignore_errors: true
    # =======================================================

  handlers:
    - name: Apply network changes
      ansible.builtin.command: "netplan apply"
