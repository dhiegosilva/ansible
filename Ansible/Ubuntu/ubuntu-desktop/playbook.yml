- name: Configure Ubuntu 25.04 Environment
  hosts: all
  become: true
  vars:
    flatpak_update_script: /usr/local/bin/flatpak-auto-update.sh
    flatpak_update_log: /var/log/flatpak-update.log

  tasks:

    # ===== Swap removal =====
    - name: Disable swap
      command: swapoff -a
      ignore_errors: true

    - name: Remove swap entry from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^\s*([^#]\S+)\s+\S+\s+swap\s'
        state: absent

    - name: Remove swapfile
      file:
        path: /swapfile
        state: absent

    # ===== XanMod repository and kernel =====
    - name: Remove legacy XanMod key
      file:
        path: /usr/share/keyrings/xanmod.gpg
        state: absent

    - name: Remove legacy XanMod source list
      file:
        path: /etc/apt/sources.list.d/xanmod-release.list
        state: absent

    - name: Remove existing XanMod source list
      file:
        path: /etc/apt/sources.list.d/xanmod-kernel.list
        state: absent

    - name: Ensure XanMod GPG key is present
      get_url:
        url: https://dl.xanmod.org/gpg.key
        dest: /usr/share/keyrings/xanmod-archive-keyring.gpg
        mode: '0644'
      register: xanmod_key
      until: xanmod_key is succeeded
      retries: 3
      delay: 5

    - name: Ensure XanMod apt repository
      apt_repository:
        filename: xanmod-kernel
        repo: "deb [signed-by=/usr/share/keyrings/xanmod-archive-keyring.gpg arch=amd64] http://deb.xanmod.org releases main"
        state: present
        update_cache: yes
      when: xanmod_key.changed

    - name: Install XanMod edge x64v3 kernel
      apt:
        name: linux-xanmod-edge-x64v3
        state: present

    # ===== ZRAM setup =====
    - name: Install zram-tools
      apt:
        name: zram-tools
        state: present

    - name: Configure zram
      copy:
        dest: /etc/default/zramswap
        content: |
          PERCENT=200
      register: zram_conf

    - name: Restart zramswap if needed
      systemd:
        name: zramswap.service
        state: restarted
      when: zram_conf.changed

    # ===== Snap removal =====
    - name: Check for snapd
      stat:
        path: /usr/bin/snap
      register: snap_check

    - name: Stop snapd
      systemd:
        name: snapd
        state: stopped
        enabled: no
      when: snap_check.stat.exists

    - name: Remove non-core snaps
      shell: |
        for s in $(snap list | awk 'NR>1{print $1}' | grep -Ev 'core|snapd'); do
          snap remove --purge "$s" || true
        done
      when: snap_check.stat.exists
      ignore_errors: true

    - name: Remove core snaps
      shell: |
        for c in snapd-desktop-integration snap-store core20 core22; do
          snap remove --purge "$c" || true
        done
      when: snap_check.stat.exists
      ignore_errors: true

    - name: Purge snapd
      apt:
        name: snapd
        state: absent
      when: snap_check.stat.exists

    # ===== APT updates =====
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Dist-upgrade
      apt:
        upgrade: dist

    # ===== Git =====
    - name: Install Git
      apt:
        name: git
        state: present

    - name: Configure Git user
      become: false
      git_config:
        scope: global
        name: '{{ item.name }}'
        value: '{{ item.value }}'
      loop:
        - { name: user.name,  value: 'Dhiego Silva' }
        - { name: user.email, value: 'dhiego.silva@hotmail.com' }

    # ===== Flatpak =====
    - name: Install Flatpak
      apt:
        name: flatpak
        state: present

    - name: Add Flathub remote
      command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      args:
        creates: /var/lib/flatpak/repo/flathub

    - name: Install Flatpak apps
      command: flatpak install -y flathub {{ item }}
      loop:
        - com.brave.Browser
        - io.github.peazip.PeaZip
        - com.github.tchx84.Flatseal
        - org.videolan.VLC
        - org.gnome.meld
        - io.dbeaver.DBeaverCommunity
        - org.remmina.Remmina
        - com.ultimaker.cura
      args:
        creates: '/var/lib/flatpak/app/{{ item }}'

    # ===== VS Code =====
    - name: Check if VS Code is installed
      stat:
        path: /usr/bin/code
      register: code_installed

    - name: Ensure VS Code repo and key if needed
      block:
        - name: Remove legacy Microsoft keyring
          file:
            path: /usr/share/keyrings/microsoft.gpg
            state: absent

        - name: Download Microsoft GPG key if missing
          shell: |
            wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /usr/share/keyrings/packages.microsoft.gpg
          args:
            creates: /usr/share/keyrings/packages.microsoft.gpg

        - name: Remove legacy VS Code repo list
          file:
            path: /etc/apt/sources.list.d/vscode.list
            state: absent

        - name: Add VS Code repository
          apt_repository:
            filename: vscode
            repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"
            state: present
            update_cache: yes

        - name: Install VS Code
          apt:
            name: code
            state: present
      when: not code_installed.stat.exists

    # ===== SSH config =====
    - name: Permit root SSH login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin yes'

    - name: Permit password SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication yes'

    - name: Restart SSH
      systemd:
        name: '{{ "ssh" if ansible_distribution in ["Ubuntu","Debian"] else "sshd" }}'
        state: restarted

    - name: Set root password
      user:
        name: root
        password: '{{ "f4x4d8p6" | password_hash("sha512") }}'

    # ===== GNOME cleanup =====
    - name: Remove GNOME packages
      apt:
        name:
          - gnome-power-manager
          - evince
          - gnome-logs
        state: absent

    - name: Autoremove
      apt:
        autoremove: yes
        purge: yes

    # ===== Fish shell =====
    - name: Install Fish
      apt:
        name: fish
        state: present

    - name: Default shell fish
      user:
        name: dhiego
        shell: /usr/bin/fish

    # ===== Kisak Mesa PPA (using add-apt-repository instead of apt-key) =====
    - name: Add Kisak Mesa PPA with add-apt-repository
      command: add-apt-repository -y ppa:kisak/kisak-mesa
      args:
        creates: /etc/apt/sources.list.d/kisak-ubuntu-kisak-mesa-*.list

    # ===== Tilix =====
    - name: Install Tilix
      apt:
        name: tilix
        state: present

    # ===== Flatpak Auto-Update =====
    - name: Ensure Flatpak update log
      file:
        path: '{{ flatpak_update_log }}'
        state: touch
        owner: root
        group: root
        mode: '0644'

    - name: Populate update script
      copy:
        dest: '{{ flatpak_update_script }}'
        content: |
          #!/usr/bin/env bash
          flatpak update -y >> "{{ flatpak_update_log }}" 2>&1
        owner: root
        group: root
        mode: '0755'

    - name: Deploy Flatpak auto-update service
      copy:
        dest: /etc/systemd/system/flatpak-auto-update.service
        content: |
          [Unit]
          Description=Flatpak auto-update at boot and weekly
          Wants=network-online.target
          After=network-online.target
          ConditionNetworkOnline=yes

          [Service]
          Type=oneshot
          ExecStart={{ flatpak_update_script }}
          StandardOutput=journal
          StandardError=journal
        owner: root
        group: root
        mode: '0644'

    - name: Deploy Flatpak auto-update timer
      copy:
        dest: /etc/systemd/system/flatpak-auto-update.timer
        content: |
          [Unit]
          Description=Run Flatpak auto-update at boot and weekly

          [Timer]
          OnBootSec=2min
          OnCalendar=weekly
          Persistent=true

          [Install]
          WantedBy=timers.target
        owner: root
        group: root
        mode: '0644'

    - name: Enable Flatpak timer
      systemd:
        daemon_reload: yes
        name: flatpak-auto-update.timer
        enabled: yes
        state: started

  handlers:
    - name: Apply network changes
      command: netplan apply
